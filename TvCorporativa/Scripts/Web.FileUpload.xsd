<?xml version="1.0" encoding="utf-8"?>
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:vs="http://schemas.microsoft.com/Visual-Studio-Intellisense" xmlns:name="urn:fileupload-schema" >
  <xs:element name="fileUpload">
    <xs:annotation>
      <xs:documentation>Basic settings for the Backload. component library. TIP: You do not need to include any of these setting in your web.config or external config file, if these default settings suit your needs.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence maxOccurs="unbounded">
        <xs:element name="fileSystem" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Sets the parameters for the dedicated storage location Filesystem or dataBase [Default: "Filesystem"]</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:attribute name="filesRoot" type="xs:string" default="~/Files" use="optional"><xs:annotation><xs:documentation>Root upload folder. If the value starts with '~/' (e.g. ~/files) the path is relative to the web root, otherwise set an absolute local path (e.g. d:/files) [Default: "~/Files"]</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="usersRoot" type="xs:string" default="Users" use="optional"><xs:annotation><xs:documentation>Special subfolder within the filesRoot to store user related files like photos etc. Set it to usersRoot="" if you do not need this subfolder [Default: ""]</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="objectsRoot" type="xs:string" default="Objects" use="optional"><xs:annotation><xs:documentation>Subfolder within the filesRoot. Set it to objectsRoot="" if you do not need a subfolder [Default: ""]</xs:documentation></xs:annotation></xs:attribute>
          </xs:complexType>
        </xs:element>
        <xs:element name="database" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Sets the parameters for the dedicated storage location Filesystem or dataBase [Default: "Filesystem"]</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:attribute name="assemblyName" type="xs:string" default="" use="optional"><xs:annotation><xs:documentation>Name of the assembly where the DBContext class is defined. You can leave this an empty string, if it is defined in the executing (caller of the file upload handler library) assembly [Default: ""]</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="dbContext" type="xs:string" default="" use="optional"><xs:annotation><xs:documentation>Full qualified name of the DBContext derived class [Default: ""]</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="entitySetName" type="xs:string" default="Files" use="optional"><xs:annotation><xs:documentation>Name of the root entity where the files will be stored directly or where the navigation begins (with navigation properties [Default: "Files"]</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="primaryKeyName" type="xs:string" default="ID" use="optional"><xs:annotation><xs:documentation>Name of the primary key of the root entity (Seperate multiple keys by comma [Default: "ID"]</xs:documentation></xs:annotation></xs:attribute>
          </xs:complexType>
        </xs:element>
        <xs:element name="security" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Security related settings. By default there are no restrictions. If you need a deeper control, set up your own controller to receive the request, do the authentication/authorization and then call the handler.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:attribute name="allowAnonymous" type="xs:boolean" default="true" use="optional"><xs:annotation><xs:documentation>True: Anyone is allowed, false: The user must be authenticated [Default: "true"]</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="allowedDownloadRoles" type="xs:string" default="*" use="optional"><xs:annotation><xs:documentation>By default there are no restrictions on who can download files by a GET request. You can change this by adding a comma seperated list of roles [Default: "*"]</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="allowedUploadRoles" type="xs:string" default="*" use="optional"><xs:annotation><xs:documentation>By default there are no restrictions on who can upload files whithin a POST/PUT request. You can change this by adding a comma seperated list of roles [Default: "*"]</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="allowedDeleteRoles" type="xs:string" default="*" use="optional"><xs:annotation><xs:documentation>By default there are no restrictions on who can delete files by a DELETE request. You can change this by adding a comma seperated list of roles [Default: "*"]</xs:documentation></xs:annotation></xs:attribute>
          </xs:complexType>
        </xs:element>
        <xs:element name="images" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Setting for the handling of uploaded images.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:attribute name="width" type="xs:unsignedShort" default="1024" use="optional"><xs:annotation><xs:documentation>Width or max width (depends on resizeMode) of the resulting image [Range: 20-5000, Default: "1024"]</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="height" type="xs:unsignedShort" default="768" use="optional"><xs:annotation><xs:documentation>Height or max height (depends on resizeMode) of the resulting image [Range: 20-5000, Default: "768"]</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="dpi" type="xs:unsignedShort" default="96" use="optional"><xs:annotation><xs:documentation>Resolution of the resulting image (dots per inch) [Range: 72-600, Default: "96"]</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="canvasColor" type="xs:string" default="#ffffff" use="optional"><xs:annotation><xs:documentation>Background color of the canvas. Only used when resize mode is fit and the image ratio of the source and target image differ. You can also use argb (rgb with alpha channel, e.g. background: #00ffffff (transparent), #80ffffff (white, 50% transparency), #ffffffff (white, opaque))  [Default: #ffffff]</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="resizeMode" default="none" use="optional"><xs:annotation><xs:documentation>Sets the resize mode if the image should be resized into a max width or height canvas [Default: "none"]</xs:documentation></xs:annotation>
              <xs:simpleType >
                <xs:restriction base="xs:string">
                  <xs:enumeration value="none"><xs:annotation><xs:documentation>Keep original image, no resizing or cropping</xs:documentation></xs:annotation></xs:enumeration>
                  <xs:enumeration value="ratio"><xs:annotation><xs:documentation>No Canvas, preserves ratio, width and height are max sizes</xs:documentation></xs:annotation></xs:enumeration>
                  <xs:enumeration value="fit"><xs:annotation><xs:documentation>Fit into canvas, preserves ratio, centered on canvas</xs:documentation></xs:annotation></xs:enumeration>
                  <xs:enumeration value="crop"><xs:annotation><xs:documentation>Placed on canvas, cropped if neccessary with center of the original image</xs:documentation></xs:annotation></xs:enumeration>
                </xs:restriction>
              </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="forceImageType" default="none" use="optional" ><xs:annotation><xs:documentation>By default the image type of the original image is used. Set this attribute to always output a different type [Default:none]</xs:documentation></xs:annotation>
              <xs:simpleType>
                <xs:restriction base="xs:string">
                  <xs:enumeration value="none"><xs:annotation><xs:documentation>Use the original image type</xs:documentation></xs:annotation></xs:enumeration>
                  <xs:enumeration value="image/png"><xs:annotation><xs:documentation>.png (protable network graphics)</xs:documentation></xs:annotation></xs:enumeration>
                  <xs:enumeration value="image/jpeg"><xs:annotation><xs:documentation>Files with .jpeg or .jpg extension</xs:documentation></xs:annotation></xs:enumeration>
                  <xs:enumeration value="image/tiff"><xs:annotation><xs:documentation>Files with .tif or .tiff extension</xs:documentation></xs:annotation></xs:enumeration>
                  <xs:enumeration value="image/gif"><xs:annotation><xs:documentation>Files with .gif extension</xs:documentation></xs:annotation></xs:enumeration>
                  <xs:enumeration value="image/bmp"><xs:annotation><xs:documentation>Microsoft bitmap format.</xs:documentation></xs:annotation></xs:enumeration>
                </xs:restriction>
              </xs:simpleType>
            </xs:attribute>
          </xs:complexType>
        </xs:element>
        <xs:element name="thumbnails" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Setting for the handling of thumbnails.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:attribute name="path" type="xs:string" default="_thumbs" use="optional"><xs:annotation><xs:documentation>Location of the thumbnail within the folder where the main file is stored (thumbnails only) [Default: "_thumbs"]</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="width" type="xs:unsignedShort" default="80" use="optional"><xs:annotation><xs:documentation>Width or max width (depends on resizeMode) of the resulting thumbnail [Range: 20-500, Default: "80"]</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="height" type="xs:unsignedShort" default="60" use="optional"><xs:annotation><xs:documentation>Height or max height (depends on resizeMode) of the resulting thumbnail [Range: 20-500, Default: "60"]</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="dpi" type="xs:unsignedShort" default="96" use="optional"><xs:annotation><xs:documentation>Resolution of the resulting thumbnail (dots per inch) [Range: 72-600, Default: "96"]</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="canvasColor" type="xs:string" default="#ffffff" use="optional"><xs:annotation><xs:documentation>Background color of the canvas. Only used when resize mode is fit and the image ratio of the source and target image differ. You can also use argb (rgb with alpha channel, e.g. background: #00ffffff (transparent), #80ffffff (white, 50% transparency), #ffffffff (white, opaque))  [Default: #ffffff]</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="resizeMode" default="none" use="optional" ><xs:annotation><xs:documentation>Sets the resize mode if the thumbnail should be resized into a max width or height of a thumbnail canvas [Default: "place"]</xs:documentation></xs:annotation>
              <xs:simpleType >
                <xs:restriction base="xs:string">
                  <xs:enumeration value="none"><xs:annotation><xs:documentation>Keep original image, no resizing or cropping</xs:documentation></xs:annotation></xs:enumeration>
                  <xs:enumeration value="ratio"><xs:annotation><xs:documentation>No Canvas, preserves ratio, width and height are max sizes</xs:documentation></xs:annotation></xs:enumeration>
                  <xs:enumeration value="fit"><xs:annotation><xs:documentation>Fit into canvas, preserves ratio, centered on canvas</xs:documentation></xs:annotation></xs:enumeration>
                  <xs:enumeration value="place"><xs:annotation><xs:documentation>If the source image is bigger than the canvas same as fit. If it is smaller than the canvas, it will be placed in the center of the canvas without resizing</xs:documentation></xs:annotation></xs:enumeration>
                  <xs:enumeration value="crop"><xs:annotation><xs:documentation>Placed on canvas, cropped if neccessary with center of the original image</xs:documentation></xs:annotation></xs:enumeration>
                </xs:restriction>
              </xs:simpleType>
            </xs:attribute>
            <xs:attribute name="imageType" default="image/png" use="optional" ><xs:annotation><xs:documentation>Thumnail images must all have the same image type in order the upload handler can find and return the correct thumbnail path [Default: "image/png"]</xs:documentation></xs:annotation>
              <xs:simpleType >
                <xs:restriction base="xs:string">
                  <xs:enumeration value="image/png"><xs:annotation><xs:documentation>.png (protable network graphics)</xs:documentation></xs:annotation></xs:enumeration>
                  <xs:enumeration value="image/jpeg"><xs:annotation><xs:documentation>Files with .jpeg or .jpg extension</xs:documentation></xs:annotation></xs:enumeration>
                  <xs:enumeration value="image/gif"><xs:annotation><xs:documentation>Files with .gif extension</xs:documentation></xs:annotation></xs:enumeration>
                </xs:restriction>
              </xs:simpleType>
            </xs:attribute>
          </xs:complexType>
        </xs:element>
        <xs:element name="clientFiles" minOccurs="0">
          <xs:annotation>
            <xs:documentation>If the bundeling feature is used (@Render.Scripts(), @Render.Styles()), set the appropriate files folder. TIP: Don't forgat to register the bundeling feature in the global.asax. See example project.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:attribute name="scripts" type="xs:string" default="~/Scripts/FileUpload/" use="optional"><xs:annotation><xs:documentation>Scripts folder [Default: "~/Scripts/FileUpload/"]</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="styles" type="xs:string" default="~/Content/FileUpload/css/" use="optional"><xs:annotation><xs:documentation>Styles folder [Default: "~/Content/FileUpload/css/"]</xs:documentation></xs:annotation></xs:attribute>
          </xs:complexType>
        </xs:element>
        <xs:element name="contentTypes" minOccurs="0">
          <xs:annotation>
            <xs:documentation>ContentTypes has two purposes: First, it is used to send an appropriate thumbnail of the file type back to the browser if it is not an image. Second: on uploads you can define a subfolder for a content-type that matches a regular expression, in order to store any content of this type in this folder (e.g. pdf files in a pdf folder)</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence maxOccurs="unbounded">
              <xs:element name="clear" nillable="true" minOccurs="0" maxOccurs="1" ><xs:annotation><xs:documentation>Clears the entire contentType list</xs:documentation></xs:annotation></xs:element>
              <xs:element name="remove" minOccurs="0" maxOccurs="unbounded" >
                <xs:annotation>
                  <xs:documentation>Removes a contentType entry by name</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:attribute name="name" type="xs:string" use="required">
                    <xs:annotation>
                      <xs:documentation>The name of the entry [required]</xs:documentation>
                    </xs:annotation>
                  </xs:attribute>
                </xs:complexType>
              </xs:element>
              <xs:element name="add" minOccurs="0" maxOccurs="unbounded"><xs:annotation><xs:documentation>New contentType entry (MS Office, OpenOffice, PDF and text file are included by default. No need to inlude these anymore):</xs:documentation></xs:annotation>
                <xs:complexType>
                  <xs:attribute name="name" type="xs:string" use="required"><xs:annotation><xs:documentation>An unique name of the entry</xs:documentation></xs:annotation></xs:attribute>
                  <xs:attribute name="extFragment" type="xs:string" use="optional"><xs:annotation><xs:documentation>Complete or fragment (.net RegEx string) of the file extension (e.g. .mp finds .mp3, .mp4, etc). Leave it blank, to skip this test.</xs:documentation></xs:annotation></xs:attribute>
                  <xs:attribute name="typeFragment" type="xs:string" use="optional"><xs:annotation><xs:documentation>Complete or fragment (.net RegEx string) of the content-type (e.g. mpeg or application/pdf). Leave it blank, to skip this test. Content-types matches are preferred over extension matches.</xs:documentation></xs:annotation></xs:attribute>
                  <xs:attribute name="thumbnail" type="xs:string" default="File.png" use="optional"><xs:annotation><xs:documentation>File name of the thumbnail image within the content-types thumbnail folder.  Special handling of Images: Leave it blank, to send a preview of the uploaded image back, or set a thumbnail if you do not want to return a preview.</xs:documentation></xs:annotation></xs:attribute>
                  <xs:attribute name="subFolder" type="xs:string" default="" use="optional"><xs:annotation><xs:documentation>Subfolder of the object context folder. Has to be set only if files of this content-type should be stored seperatly from other types (e.g. "movies") [Default: ""]</xs:documentation></xs:annotation></xs:attribute>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
            <xs:attribute name="thumbnailPath" type="xs:string" default="~/Content/FileUpload/content-types/" use="optional"><xs:annotation><xs:documentation>Path to the content-types thumbnail folder (contains different resolutions) [Default: "~/Content/FileUpload/content-types"]</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="thumbnailSize" type="xs:unsignedShort" default="64" use="optional"><xs:annotation><xs:documentation>Size of the thumbnail [Range: 16-500, Default: "64"] (Tip: Use the following sizes to avoid resizing: 16,24,32,48,64,72,96,128)</xs:documentation></xs:annotation></xs:attribute>
            <xs:attribute name="useThumbnailCanvas" type="xs:boolean" default="true" use="optional"><xs:annotation><xs:documentation>Uses the thumbnail canvas (width, height, canvasColor) and places the content type specific thumbnail in the center of it [Default: "true"]</xs:documentation></xs:annotation></xs:attribute>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
      <xs:attribute name="webFilesRoot" type="xs:string" default="" use="optional"><xs:annotation><xs:documentation>Leave this an empty string, if filesRoot is relative to the web root (starts with '~/', see filesRoot). If filesRoot is an absolute local path (see filesRoot), the FileUpload handler cannot calculate a web path. Only in this case you must set an absolute web url to the files root, in order a correct filestpath can returned (e. g. "http://myfiles.filestore.com/files/" [Default: ""]</xs:documentation></xs:annotation></xs:attribute>
      <xs:attribute name="uniqueFileNames" type="xs:boolean" default="false" use="optional"><xs:annotation><xs:documentation>Generates unique file names based on guids [Default: "false"]</xs:documentation></xs:annotation></xs:attribute>
      <xs:attribute name="keepOrgFileNames" type="xs:boolean" default="false" use="optional"><xs:annotation><xs:documentation>Only applies if you use the uniqueFileNames option. If set to true, the original file name will be stored (subfolder: _mappings) [Default: "false"]</xs:documentation></xs:annotation></xs:attribute>
      <xs:attribute name="getInclSubFolders" type="xs:boolean" default="false" use="optional"><xs:annotation><xs:documentation>On a GET request (return links to uploaded files) only the upload root folder (default filesRoot) is searched for uploaded files. Set to true in order to include subfolders. (Example: A content-type specific subfolder is set to "pdffiles" the search will find files within this subfolder. There are several ways set up subfolders, e.g. uploadContext and objectContext) [Default: "false"]</xs:documentation></xs:annotation></xs:attribute>
      <xs:attribute name="returnFilesUrl" type="xs:boolean" default="true" use="optional"><xs:annotation><xs:documentation>By default the url to the uploaded files is returned, so the user is able to open the uploaded file (download). If you do not want that default behaviour set this to "false", so users are not able to download files. In this case, in order to provide donload capabilities, you can setup your own contollers/handlers with your own business logic [Default: "true"]</xs:documentation></xs:annotation></xs:attribute>
      <xs:attribute name="returnExtraInfo" default="basic" use="optional"><xs:annotation><xs:documentation>Returns information about original file names, folders and estra message [Default: "basic"]</xs:documentation></xs:annotation>
        <xs:simpleType >
          <xs:restriction base="xs:string">
            <xs:enumeration value="none"><xs:annotation><xs:documentation>No extra infos where send back to the client</xs:documentation></xs:annotation></xs:enumeration>
            <xs:enumeration value="basic"><xs:annotation><xs:documentation>Returns the original file name as it is send by the upload, upload path and messages from the handler (e.g. file already exists [Default]</xs:documentation></xs:annotation></xs:enumeration>
            <xs:enumeration value="extended"><xs:annotation><xs:documentation>Returns basic information plus a detailed folder structure.</xs:documentation></xs:annotation></xs:enumeration>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="allowDelete" type="xs:boolean" default="true" use="optional"><xs:annotation><xs:documentation>Set to "false" if deletion of uploaded files should be not possible [Default: "true"]</xs:documentation></xs:annotation></xs:attribute>
      <xs:attribute name="deleteHandler" type="xs:string" default="" use="optional"><xs:annotation><xs:documentation>By default (deleteHandler="") the FileUploadHandler handles incoming delete requests. If you need to delete uploaded files within your own business logic set a relative (~/...) or absolute path (starts with http or https). The url of the handler is returned to the browser in the json output for the delete url [Default: ""]</xs:documentation></xs:annotation></xs:attribute>
      <xs:attribute name="enableIntegratedHandler" type="xs:boolean" default="true" use="optional"><xs:annotation><xs:documentation>By default the internal file upload handler is running and ready to receive incoming files or requests. This enables us zero configuration. If you want to set up your own controller in order to do some business logic, set this to "false". [Default: "true"]</xs:documentation></xs:annotation></xs:attribute>
      <xs:attribute name="storageContext" default="Filesystem" use="optional" ><xs:annotation><xs:documentation>Files may be stored in the file system or in a database (through the Entity Framework) [Default: "Filesystem"]</xs:documentation></xs:annotation>
        <xs:simpleType >
          <xs:restriction base="xs:string">
            <xs:enumeration value="Filesystem"><xs:annotation><xs:documentation>Saves uploaded files in the file system [Default]</xs:documentation></xs:annotation></xs:enumeration>
            <xs:enumeration value="Database"><xs:annotation><xs:documentation>Saves uploaded files in a Database.</xs:documentation></xs:annotation></xs:enumeration>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="configSource" type="xs:string" default="Web.FileUpload.config" use="optional"><xs:annotation><xs:documentation>Name of an external config file [Default: "Web.FileUpload.config"]</xs:documentation></xs:annotation></xs:attribute>
    </xs:complexType>
  </xs:element>
</xs:schema>